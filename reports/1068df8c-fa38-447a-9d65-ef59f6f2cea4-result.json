{"name": "test_put_request", "status": "broken", "statusDetails": {"message": "TypeError: Object of type function is not JSON serializable", "trace": "self = <tests.integration_test.test_create_booking.TestIntegration object at 0x000001DFA65EA050>, test_create_token_request = '1410548d538e838', test_create_booking = 1376\n\n    @pytest.mark.smoke\n    @allure.feature('TC#3 Verify PUT request')\n    def test_put_request(self, test_create_token_request, test_create_booking):\n        temp_token = \"token=\" + test_create_token_request\n        print(temp_token)\n        headers = {\n            \"Content-Type\": \"application/json\",\n            \"Cookie\": temp_token\n        }\n>       response = put_data(url_update_delete_booking(test_create_booking), headers=headers,auth=None, payload=payload_update_booking,in_json=False)\n\ntests\\integration_test\\test_create_booking.py:48: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc\\helpers\\api_wrapper.py:19: in put_data\n    patch_response_data = requests.patch(url=url, headers=headers, auth=auth, data=json.dumps(payload))\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\__init__.py:231: in dumps\n    return _default_encoder.encode(obj)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\encoder.py:200: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\encoder.py:258: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.encoder.JSONEncoder object at 0x000001DFA3E34B90>, o = <function payload_update_booking at 0x000001DFA68C53A0>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n>       raise TypeError(f'Object of type {o.__class__.__name__} '\n                        f'is not JSON serializable')\nE       TypeError: Object of type function is not JSON serializable\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\json\\encoder.py:180: TypeError"}, "start": 1691262838998, "stop": 1691262838998, "uuid": "11f95d6c-4b9f-44cc-935e-0d0fb67d3130", "historyId": "10b47bbbab04e6f342ead7a79622bbdb", "testCaseId": "10b47bbbab04e6f342ead7a79622bbdb", "fullName": "tests.integration_test.test_create_booking.TestIntegration#test_put_request", "labels": [{"name": "feature", "value": "TC#3 Verify PUT request"}, {"name": "tag", "value": "smoke"}, {"name": "parentSuite", "value": "tests.integration_test"}, {"name": "suite", "value": "test_create_booking"}, {"name": "subSuite", "value": "TestIntegration"}, {"name": "host", "value": "LAPTOP-MRKV93V5"}, {"name": "thread", "value": "3676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.integration_test.test_create_booking"}]}